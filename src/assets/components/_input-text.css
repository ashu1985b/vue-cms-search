@define-mixin floating-input-element-shape $input-height, $input-padding-y {
    height: calc(0.75rem + $input-height);
    padding-top: calc(0.75rem + $input-padding-y);
}
@define-mixin floating-input-label-position $height {
    transform: translateY(calc((0.75rem + $height)/2 - 0.75rem));
}
@define-mixin floating-underline-input-label-position $height {
    transform: translateY(calc((0.75rem + $height)/2 - 0.35rem));
}
@define-mixin input-label-position $height {
    transform: translateY(calc($height/2 - 0.75rem));
}
/* @define-mixin underline-input-label-position $height {
    transform: translateY(calc($height/2 - 0.35rem));
} */
/* @define-mixin floating-input-padding $padding-x, $padding-y {
    padding: calc(0.75rem + $padding-y) $padding-x $padding-y;
} */
/* Base bordered input */
.c-text-input {
    position: relative;
    &__element {
        display: block;
        width: 100%;
        height: $input-height;
        padding: $input-padding-y $input-padding-x;
        background-color: $input-bg;
        border: 1px solid $input-border-color;
        font-size: $input-font-size;
        font-weight: $input-font-weight;
        line-height: $input-line-height;
        color: $input-color;
        border-radius: $input-border-radius;
        transition: $input-transition;
        &::placeholder {
            color: $input-placeholder-color;
            /* Override Firefox's unusual default opacity */
            opacity: 1;
        }
    }
    &__label {
        user-select: none;
        pointer-events: none;
        position: absolute;
        left: $input-padding-x;
        top: 0;
        @mixin input-label-position $input-height;
        color: $input-placeholder-color;
        font-size: $input-font-size;
        font-weight: $input-font-weight;
        line-height: $input-line-height;
        transition: $input-label-transition;
        transform-origin: left top;
    }
    &__element:focus,
    &__element.is-focused {
        outline: none;
        box-shadow: $input-focus-box-shadow;
        border-color: $blue;
    }
    &__element:focus ~ &__label,
    &__element.is-focused ~ &__label  {
        display: none;
    }
    &__element {
        &:disabled,
        &.is-disabled,
        &[readonly] {
            pointer-events: none;
            background-color: $input-disabled-bg;
            /* iOS fix for unreadable disabled content */
            opacity: 1;
        }
    }
}

/* Floating label UI */
.c-text-input {
    &--floating &__element {
        @mixin floating-input-element-shape $input-height, $input-padding-y;
    }
    &--floating &__label {
        @mixin floating-input-label-position $input-height;
    }
    &--underline&--floating &__label {
        @mixin floating-underline-input-label-position $input-height;
    }
    &--floating input&__element:focus ~ &__label,
    &--floating &__element.is-focused ~ &__label {
        display: initial;
        transform: translateY(0.25rem) scale(0.75);
    }
}

/* Underline type UI */
.c-text-input {
    &--underline &__element {
        padding-left: 0;
        padding-right: 0;
        border-radius: 0;
        border-width: 0;
    }
    &--underline &__label {
        left: 0;
    }
    &--underline > .rule {
        position: relative;
        pointer-events: none;
        border-bottom: 1px solid $input-border-color;
        margin-top: -1px;
        &:before {
            content: "";
            position: absolute;
            left: 0;
            right: 0;
            top: -1px;
            border-top: 2px solid $blue;
            transition: transform 0.15s ease-in-out;
            transform: scaleX(0);
            transform-origin: left top;
        }
    }
    &--underline &__element:focus,
    &--underline &__element.is-focused {
        box-shadow: none;
        & ~ .rule:before {
            transform: scaleX(1);
        }
    }
    &--underline &__element {
        &:disabled,
        &.is-disabled,
        &[readonly] {
            background-color: $input-bg;
        }
    }
}

/* Text area input height reset */
.c-text-input {
    textarea&__element {
        height: auto;
        min-height: $input-height;
    }
}